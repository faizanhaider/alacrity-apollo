{"version":3,"sources":["gql/fragments/Book.js","gql/queries/Book.js","containers/books/booksList.tsx","gql/mutations/Book.js","components/BookForm.tsx","containers/books/addbook.tsx","containers/books/updateBook.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gql","GET_BOOK","bookFragment","GET_BOOKS","columns","field","headerName","width","sortable","renderCell","params","to","getValue","BooksList","useQuery","fetchPolicy","data","loading","error","useState","totalPrice","setTotalPrice","toalSelectedBooks","setTotalSelectedBooks","message","bookList","books","reduce","acc","item","push","id","bookId","Button","Typography","variant","toFixed","style","height","rows","pageSize","checkboxSelection","onSelectionChange","rowIds","length","value","find","book","Number","price","CREATE_BOOK","EDIT_BOOK","BookForm","defaultValues","onCancel","onSubmit","title","setTitle","setPrice","author","setAuthor","isValid","Container","maxWidth","Grid","container","spacing","xs","TextField","label","margin","onChange","e","target","replace","parseFloat","handlePriceChange","onClick","color","disabled","AddBook","history","useHistory","useMutation","onCompleted","onError","alert","createBookFn","variables","updateBookFun","Routes","exact","path","render","match","httpLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","link","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f253a06e.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport default gql`\n  fragment book on Book {\n    bookId,\n    title,\n    author,\n    price\n  }\n`;","import gql from 'graphql-tag';\n\nimport bookFragment from '../fragments/Book';\n\nexport const GET_BOOK = gql`\n  query book($bookId: Int!) {\n    book(bookId: $bookId) {\n      ...book\n    }\n  }\n  ${bookFragment}\n`;\n\nexport const GET_BOOKS = gql`\n  query books {\n    books {\n      ...book\n    }\n  }\n  ${bookFragment}\n`;","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_BOOKS } from \"../../gql/queries/Book\";\nimport { DataGrid, ValueFormatterParams, ColDef } from \"@material-ui/data-grid\";\nimport { Link } from \"react-router-dom\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { Book } from \"../../models/Books\";\n\nconst columns: ColDef[] = [\n  { field: \"bookId\", headerName: \"ID\", width: 70 },\n  {\n    field: \"\",\n    headerName: \"Edit\",\n    sortable: false,\n    width: 160,\n    renderCell: (params: ValueFormatterParams) => (\n      <Link to={`/books/${params.getValue(\"bookId\")}`}>\n        <EditOutlinedIcon />\n      </Link>\n    ),\n  },\n  { field: \"title\", headerName: \"Title\", width: 130 },\n  { field: \"author\", headerName: \"Author\", width: 130 },\n  { field: \"price\", headerName: \"Price\", width: 130 },\n];\n\nconst BooksList: React.FC<{}> = () => {\n  const { data, loading, error } = useQuery(GET_BOOKS, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [toalSelectedBooks, setTotalSelectedBooks] = useState(0);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Error! {error.message}</div>;\n  }\n\n  const bookList = (data.books as Book[]).reduce<Array<{ id: number } & Book>>(\n    (acc, item: Book) => {\n      acc.push({\n        id: item.bookId,\n        ...item,\n      });\n      return acc;\n    },\n    []\n  );\n\n  return (\n    <>\n      <Button>\n        <Link to=\"/books/new\">Create New</Link>\n      </Button>\n      <Typography variant=\"h6\">\n        Total Price for {toalSelectedBooks} books: {totalPrice.toFixed(2)}\n      </Typography>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          rows={bookList}\n          columns={columns}\n          pageSize={5}\n          checkboxSelection\n          onSelectionChange={({ rowIds }) => {\n            setTotalSelectedBooks(rowIds.length);\n            setTotalPrice(\n              rowIds.reduce<number>((acc, value) => {\n                acc += data.books.find(\n                  (book: Book) => book.bookId === Number(value)\n                ).price;\n                return acc;\n              }, 0)\n            );\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default BooksList;\n","import gql from 'graphql-tag';\n\nimport bookFragment from '../fragments/Book';\n\nexport const CREATE_BOOK = gql`\n  mutation createBook($title: String!, $author: String!, $price: Float!) {\n    createBook(title: $title, author: $author, price: $price) {\n      ...book\n    }\n  }\n  ${bookFragment}\n`;\n\nexport const EDIT_BOOK = gql`\n  mutation editBook($bookId: Int!, $title: String!, $author: String!, $price: Float!) {\n    editBook(bookId: $bookId, title: $title, author: $author, price: $price) {\n      ...book\n    }\n  }\n  ${bookFragment}\n`;\n","import React, { useState } from \"react\";\nimport { TextField, Button, Container, Grid } from \"@material-ui/core\";\nimport { UnPersistentBook } from \"../models/Books\";\n\ninterface Props {\n  defaultValues?: UnPersistentBook;\n  onCancel: () => void;\n  onSubmit: (data: UnPersistentBook) => void;\n}\n\nconst BookForm: React.FC<Props> = ({ defaultValues, onCancel, onSubmit }) => {\n  const [title, setTitle] = useState(defaultValues?.title || \"\");\n  const [price, setPrice] = useState(defaultValues?.price || 0);\n  const [author, setAuthor] = useState(defaultValues?.author || \"\");\n\n  const handlePriceChange = (e: any) => {\n    const shouldUpdate = e.target.value.replace(/[.0-9]/g, \"\").length;\n    if (shouldUpdate) return;\n\n    const value = parseFloat(e.target.value || \"0\").toFixed(2);\n    setPrice(parseFloat(value));\n  };\n\n  const isValid = !!(price > 0 && title.length && author.length);\n\n  return (\n    <Container maxWidth=\"sm\">\n      <form>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  error={!title.length}\n                  label=\"Title\"\n                  margin=\"normal\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  error={!(price > 0)}\n                  label=\"Price\"\n                  margin=\"normal\"\n                  value={price}\n                  onChange={(e) => handlePriceChange(e)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  error={!author.length}\n                  label=\"Author\"\n                  margin=\"normal\"\n                  value={author}\n                  onChange={(e) => setAuthor(e.target.value)}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Button onClick={onCancel} color=\"secondary\">\n              Cancel\n            </Button>\n            <Button\n              disabled={!isValid}\n              onClick={() => onSubmit({ price, title, author })}\n            >\n              Submit\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  );\n};\n\nexport default BookForm;\n","import React from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_BOOK } from \"../../gql/mutations/Book\";\nimport BookForm from \"../../components/BookForm\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function AddBook() {\n  const history = useHistory();\n  const [createBookFn] = useMutation(CREATE_BOOK, {\n    onCompleted: () => history.push(\"/books\"),\n    onError: (error) => alert(`Failed to create book. ${error.message}`),\n  });\n\n  return (\n    <BookForm\n      onCancel={() => history.push(\"/books\")}\n      onSubmit={(data) => {\n        createBookFn({ variables: { ...data } });\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { EDIT_BOOK } from \"../../gql/mutations/Book\";\nimport { GET_BOOK } from \"../../gql/queries/Book\";\nimport BookForm from \"../../components/BookForm\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface Props {\n  bookId: number;\n}\n\nconst AddBook: React.FC<Props> = ({ bookId }) => {\n  const history = useHistory();\n  const [updateBookFun] = useMutation(EDIT_BOOK, {\n    onCompleted: () => history.push(\"/books\"),\n    onError: (error) => alert(`Failed to update book. ${error.message}`),\n  });\n  const { data, loading, error } = useQuery(GET_BOOK, {\n    variables: { bookId: bookId },\n  });\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Error! {error.message}</div>;\n  }\n\n  return (\n    <BookForm\n      defaultValues={data.book}\n      onCancel={() => history.push(\"/books\")}\n      onSubmit={(data) =>\n        updateBookFun({ variables: { bookId: Number(bookId), ...data } })\n      }\n    />\n  );\n};\n\nexport default AddBook;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport BooksList from \"./containers/books/booksList\";\nimport NewBook from \"./containers/books/addbook\";\nimport UpdateBook from \"./containers/books/updateBook\";\n\nfunction Routes() {\n  return (\n    <Container maxWidth=\"sm\">\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => <Link to=\"/books\">To List of Books</Link>}\n          />\n          <Route exact path=\"/books\" render={() => <BooksList />} />\n          <Route exact path=\"/books/new\" render={() => <NewBook />} />\n          <Route\n            exact\n            path=\"/books/:bookId\"\n            render={({\n              match: {\n                params: { bookId },\n              },\n            }) => <UpdateBook bookId={Number(bookId)} />}\n          />\n          <Route path=\"/notFound\" render={() => <div>Not Found</div>} />\n        </Switch>\n      </Router>\n    </Container>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { ApolloLink } from \"@apollo/client/core\";\n\nimport Routes from \"./routes\";\n\nconst httpLink = createHttpLink({ uri: \"http://localhost:4567/graphql\" });\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: (httpLink as unknown) as ApolloLink,\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Routes />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}